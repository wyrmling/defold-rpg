go.property('turn', 0)
go.property('battle_order_active', msg.url('/player#main'))
--go.property('battle_order_active', hash('/player#main'))

local obj_pos = {}
local battle_order = {}

function init(self)
	--init battle order
	table.insert(battle_order, {id = msg.url('/player#main'), name = 'player', order = true})
	
--	msg.post(".", "acquire_input_focus")
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash('get_battle_order') then
		return self.battle_order
	end

	if message_id == hash('add') then
		table.insert(battle_order, {id = message.id, name = 'enemy', order = false})
		--pprint(battle_order)
	end
	
	if message_id == hash('remove') then
        for key, order in ipairs(battle_order) do
        	if order.id == message.id then
        		table.remove(battle_order, key)
			end
		end
    end
	
--	if message_id == hash("obj_pos") then
--		obj_pos[sender] = message.x, message.y
--	end
	--print(inspect(obj_pos))
	--print('---')
	--print(sender, message.x, message.y)
	
	if message_id == hash("take_turn") then
		--print(inspect(battle_order))
		
		--pprint(sender)
		
		--scroll_msg('turn taken', sender)
		
		--print(self.battle_order_active)
		
		for key, char in ipairs(battle_order) do
			--pprint(char.id, self.battle_order_active)
			--print(char.id, self.battle_order_active)
        	if char.id == self.battle_order_active then
        		--print(#battle_order, key)
        		--battle_order[key].order = false
        		if #battle_order == key then
        		--	battle_order[1].order = true
        			self.battle_order_active = battle_order[1].id
        			break
        		else
        		--	battle_order[key+1].order = true
        			self.battle_order_active = battle_order[key+1].id
        			break
        		end
        	end
        	--print(hash('/player#main'))
        	--print(self.battle_order_active)
        	--self.battle_order_active = battle_order[2].id
        	--print(go.get('/player#main','health'))
        	
        end
        
        --pprint(battle_order)
        --print(self.battle_order_active)
		
        --pprint(hash('/player#main'))
        --print(go.get(self.battle_order_active,'health'))
        --print(go.get(msg.url('player#main'),'health'))
        
        --print(go.get('/player#main','health'))
        --pprint(go.get(hash('/player#main'),'health'))
        
		--scroll_msg('turn sent', self.battle_order_active)
        
        msg.post(self.battle_order_active, 'take_turn')
        --pprint(self.battle_order_active)
    end
end

function on_input(self, action_id, action)

end

function on_reload(self)
end


function next_turn()
	self.turn = self.turn + 1
    label.set_text("#label_turn", self.turn)
    go.set("#label_turn", "color", vmath.vector4(0, 0.2, 0.5, 1))
end

function init_battle_order()
	
end

function get_battle_order()
	return self.battle_order	
end

function scroll_msg(text_message, url)
	--print(url, go.get_id(), msg.url())
	--print(text_message .. ' by ' .. url)
	--pprint(url)
	--print(go.get_id(url))
	--msg.url()
	--go.ge
	--local msg_label = factory.create('#msg_label_factory', nil, nil, {temp = true})
	--print(msg_label)
	--msg.post(msg_label, 'scrolling_line', {text = text_message})
end

--function send_obj_pos()
--	local pos = go.get_position()
--	msg.post('/level#map', 'obj_pos', {x = pos.x, y = pos.y})
--end

function next_turn()
	--send_obj_pos()
	--print('turn sent by ' .. msg.url())
	--label.set_text("#msg_label_factory", 'turn sent')
	scroll_msg('turn sent to map from ' .. msg.url())
	--print('turn sent to map from ' .. msg.url())
	msg.post('/level#battle_order', 'take_turn')
end

function scroll_msg(text_message)
	--print(msg.url('#msg_label_factory'), msg.url())
	--print(go.get_id('#msg_label_factory'))
	local msg_label = factory.create('#msg_label_factory', nil, nil, {temp = true})
	--print(msg_label)
	msg.post(msg_label, 'scrolling_line', {text = text_message, color = vmath.vector4(math.random(), math.random(), math.random(), 1)})
end