function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})

    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()
end

function update(self)
    render.set_depth_mask(true)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	local virtual_width = 256
	local virtual_height = 240
	local virtual_ratio = math.max(virtual_height, 1.0) / math.max(virtual_width, 1.0)
	local virtual_ratio2 = math.max(virtual_width, 1.0) / math.max(virtual_height, 1.0)
	
	local actual_ratio = math.max(render.get_window_height(), 1.0) / math.max(render.get_window_width(), 1.0)
	
    local size = math.min(render.get_window_width(), render.get_window_height())

    
    if actual_ratio > virtual_ratio then
    	local y_center = ((render.get_window_height() - (size * virtual_ratio) ) / 2)
		render.set_viewport(0, y_center, size, size * virtual_ratio)
	    render.set_view(self.view)    	
    elseif actual_ratio < virtual_ratio then
    	local x_center = ((render.get_window_width() - (size * virtual_ratio2) ) / 2)
		render.set_viewport(x_center, 0, size * virtual_ratio2, size)
	    render.set_view(self.view)    	
    elseif actual_ratio == virtual_ratio then
		render.set_viewport(0, 0, size * virtual_ratio2, size)
	    render.set_view(self.view)   
    end

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_projection(vmath.matrix4_orthographic(0, virtual_width, 0, virtual_height, -1, 1))

    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()

    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, virtual_width, 0, virtual_height, -1, 1))

    

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)

    render.set_depth_mask(false)
    render.draw_debug2d()
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
    end
end

